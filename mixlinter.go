package mixlinter

import (
	"flag"
	"fmt"
	"go/ast"
	"golang.org/x/tools/go/analysis"
	"golang.org/x/tools/go/analysis/passes/inspect"
	"golang.org/x/tools/go/ast/inspector"
	"reflect"
	"strings"
)

var includeTest bool
var includeProtocolBufferGenerated bool

func init() {
	Analyzer.Flags.BoolVar(&includeTest, "include test file", false, "include test file or not")
	Analyzer.Flags.BoolVar(&includeProtocolBufferGenerated, "include generated by protocol buffer file", false, "include generated by protocol buffer file")
}

var Analyzer = &analysis.Analyzer{
	Name: "mixlinter",
	Doc:  Doc,
	Run:  run,
	Requires: []*analysis.Analyzer{
		inspect.Analyzer,
	},
	Flags: flag.FlagSet{
		Usage: nil,
	},
}

const Doc = "mixlinter is ..."

func run(pass *analysis.Pass) (interface{}, error) {
	ins := pass.ResultOf[inspect.Analyzer].(*inspector.Inspector)

	nodeFilter := []ast.Node{
		(*ast.CompositeLit)(nil),
	}

	ins.Preorder(nodeFilter, func(n ast.Node) {
		fileDirList := strings.Split(pass.Fset.File(n.Pos()).Name(), "/")
		fileName := fileDirList[len(fileDirList)-1]
		if strings.HasPrefix(fileName, "mock_") {
			return
		}
		if !includeTest && strings.HasSuffix(fileName, "_test.go") {
			return
		}
		if !includeProtocolBufferGenerated && strings.HasSuffix(fileName, ".pb.go") {
			return
		}

		var keySet bool
		switch n := n.(type) {
		case *ast.CompositeLit:
			var fields []string
			var setFields []string

			if reflect.ValueOf(n).IsNil() {
				return
			}

			if ident, ok := n.Type.(*ast.Ident); ok {
				// memo: 対象のファイルを読み込まないと構造体が解析できないみたい。。。
				fmt.Printf("type %+v\n", pass.Fset.Position(ident.Obj.Pos()))
				if reflect.ValueOf(ident.Obj).IsNil() || reflect.ValueOf(ident.Obj.Decl).IsNil() {
					fmt.Println("return")
					return
				}

				if ts, ok := ident.Obj.Decl.(*ast.TypeSpec); ok {
					if st, ok := ts.Type.(*ast.StructType); ok {
						for _, f := range st.Fields.List {
							if len(f.Names) == 0 {
								switch t := f.Type.(type) {
								case *ast.SelectorExpr:
									fields = append(fields, t.Sel.Name)
								}
							} else {
								switch f.Type.(type) {
								case *ast.Ident:
									fields = append(fields, f.Names[0].Name)
								}
							}
						}
					}
				}
			}

			for _, k := range n.Elts {
				switch e := k.(type) {
				case *ast.KeyValueExpr:
					keySet = true
					if ident, ok := e.Key.(*ast.Ident); ok {
						setFields = append(setFields, ident.Name)
					}
				default:
					setFields = append(setFields, "")
				}
			}
			if !keySet && len(setFields) != 0 {
				fmt.Println("return")
				return
			}
			fmt.Println("fields", fields)
			fmt.Println("setFields", setFields)
			for _, f := range fields {
				if !contain(f, setFields) {
					pass.Reportf(n.Pos(), "uninitialised field found: %+v", f)
				}
			}
		}
	})

	return nil, nil
}

func contain(s string, sl []string) bool {
	for _, v := range sl {
		if s == v {
			return true
		}
	}
	return false
}
